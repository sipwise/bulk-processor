# load.yml: define which *contract* relations to fetch from db.

#contracts.voip_subscribers: 1
contracts.voip_subscribers:
  include: !!perl/code | 
    {
      my ($contract,$context) = @_;
      #return 0 if $contract->{status} eq 'terminated';
      return 1;
    }
  
  filter: !!perl/code | 
    {
      my ($bill_subs,$context) = @_;
      #_debug($context,"skipping terminated subscriber $bill_subs->{username}") if $bill_subs->{status} eq 'terminated';
      #return 0 if $bill_subs->{status} eq 'terminated';
      return 1;
    }
  
  transform: !!perl/code | 
    {
      my ($bill_subs,$context) = @_;
      return $bill_subs;
    }

contracts.contact: 1
contracts.voip_subscribers.primary_number: 1
contracts.voip_subscribers.provisioning_voip_subscriber: 1
contracts.voip_subscribers.provisioning_voip_subscriber.voip_dbaliases: 1
contracts.voip_subscribers.provisioning_voip_subscriber.voip_usr_preferences: 1
contracts.voip_subscribers.provisioning_voip_subscriber.voip_usr_preferences.attribute: 1
contracts.voip_subscribers.provisioning_voip_subscriber.voip_usr_preferences.allowed_ips: 1
contracts.voip_subscribers.provisioning_voip_subscriber.voip_usr_preferences.ncos: 1
contracts.voip_subscribers.provisioning_voip_subscriber.voip_usr_preferences.cf_mapping: 1
contracts.voip_subscribers.provisioning_voip_subscriber.voip_usr_preferences.cf_mapping.destinations: 1
contracts.voip_subscribers.provisioning_voip_subscriber.voicemail_users: 1
#contracts.voip_subscribers.provisioning_voip_subscriber.voicemail_users.voicemail_spool: 1
contracts.voip_subscribers.provisioning_voip_subscriber.voip_fax_preferences: 1
contracts.voip_subscribers.provisioning_voip_subscriber.voip_fax_destinations:
  transform: !!perl/code | 
    {
      my ($fax_destinations,$context) = @_;
      return [ map { $_->{destination} . ' (' . $_->{filetype} . ')'; } @$fax_destinations ];
    }